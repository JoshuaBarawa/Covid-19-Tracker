{"version":3,"sources":["InfoCard.js","utils.js","Map.js","Table.js","LineGraph.js","App.js","reportWebVitals.js","index.js"],"names":["InfoCard","title","cases","active","total","Card","className","CardContent","Typography","color","casesTypeColors","hex","multiplier","recovered","deaths","sortData","data","sort","a","b","prettyPrintStat","stat","numeral","format","showDataOnMap","casesType","map","country","Circle","center","countryInfo","lat","long","fillOpacity","fillColor","radius","Math","sqrt","Popup","ChangeMap","zoom","useMap","setView","Map","countries","MapContainer","TileLayer","url","attribution","Table","ChartJS","register","CategoryScale","LinearScale","PointElement","LineElement","Tooltip","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","fetchData","fetch","then","response","json","console","log","length","datasets","backgroundColor","borderColor","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","getCountryInfo","getCountryData","name","iso2","sortedData","handleCountryChange","e","target","FormControl","Select","variant","onChange","MenuItem","todayCases","todayRecovered","todayDeaths","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6f1508b8.chunk.js","sourcesContent":["\r\nimport React from 'react'\r\nimport {Card, CardContent, Typography} from '@mui/material'\r\nimport './infocard.css'\r\n\r\nfunction InfoCard({title, cases, active, total, ...props}) {\r\n    return (\r\n       \r\n        <Card className={`infoCard ${active && \"infoCard--selected\"}`}>\r\n            <CardContent>\r\n                <Typography className=\"info__title\" color=\"textSecondry\">{title}</Typography>\r\n                <h3 className=\"info__cases\">{cases}</h3>\r\n                <Typography className=\"info__total\" color=\"textSecondry\"> Total: {total}</Typography>\r\n            </CardContent>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default InfoCard\r\n","\r\nimport React from 'react'\r\nimport {Circle, Popup } from 'react-leaflet'\r\nimport numeral from \"numeral\"\r\n\r\nconst casesTypeColors = {\r\n    cases: {\r\n      hex: \"#CC1034\",\r\n      multiplier: 800,\r\n    },\r\n    recovered: {\r\n      hex: \"#7dd71d\",\r\n      multiplier: 1200,\r\n    },\r\n    deaths: {\r\n      hex: \"#fb4443\",\r\n      multiplier: 2000,\r\n    },\r\n  };\r\n\r\nexport const sortData = (data) =>{\r\nconst sortedData = [...data];\r\n\r\nreturn sortedData.sort((a,b) => (a.cases > b.cases ? -1 :1))\r\n}\r\n\r\n\r\nexport const prettyPrintStat = (stat) => stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\r\n\r\n\r\nexport const showDataOnMap = (data, casesType=\"cases\") => {\r\ndata.map((country) => (\r\n    <Circle\r\n      center={[country.countryInfo.lat, country.countryInfo.long]}\r\n      fillOpacity={0.4}\r\n      color={casesTypeColors[casesType].hex}\r\n      fillColor={casesTypeColors[casesType].hex}\r\n      radius={\r\n        Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\r\n      }\r\n    >\r\n        <Popup>\r\n            <h2>Hello</h2>\r\n        </Popup>\r\n    </Circle>\r\n\r\n\r\n\r\n))\r\n}","\r\nimport React from 'react'\r\nimport {MapContainer, TileLayer, useMap} from \"react-leaflet\"\r\nimport './map.css'\r\nimport { showDataOnMap } from './utils'\r\n\r\nfunction ChangeMap({ center, zoom }) {\r\n    const map = useMap();\r\n    map.setView(center, zoom);\r\n    return null;\r\n  }\r\n\r\nfunction Map({countries, casesType, center, zoom}) {\r\n    return (\r\n        <div className=\"map\">\r\n          <MapContainer>\r\n          <ChangeMap center={center} zoom={zoom} />\r\n  <TileLayer\r\n    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n    attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n  />\r\n  {showDataOnMap(countries, casesType)}\r\n</MapContainer>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Map\r\n","\r\n\r\nimport './Table.css'\r\nimport numeral from 'numeral'\r\nimport React from 'react'\r\n\r\nfunction Table({countries}) {\r\n    return (\r\n        <div className=\"table\">\r\n        {countries.map(({country, cases}) => (\r\n                <tr>\r\n                <td>{country}</td>\r\n                <td><strong>{numeral(cases).format(\",0\")}</strong></td>\r\n                </tr>\r\n        ))}\r\n       \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Table\r\n","\r\nimport React, {useState, useEffect}from 'react'\r\nimport {Line} from \"react-chartjs-2\"\r\nimport numeral from 'numeral'\r\nimport {\r\n    Chart as ChartJS,\r\n    CategoryScale,\r\n    LinearScale,\r\n    PointElement,\r\n    LineElement,\r\n    Tooltip\r\n  } from 'chart.js'\r\n\r\nChartJS.register(\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Tooltip\r\n)\r\n\r\nconst options = {\r\n    legend: {\r\n      display: false,\r\n    },\r\n    elements: {\r\n      point: {\r\n        radius: 0,\r\n      },\r\n    },\r\n    maintainAspectRatio: false,\r\n    tooltips: {\r\n      mode: \"index\",\r\n      intersect: false,\r\n      callbacks: {\r\n        label: function (tooltipItem, data) {\r\n          return numeral(tooltipItem.value).format(\"+0,0\");\r\n        },\r\n      },\r\n    },\r\n    scales: {\r\n      xAxes: [\r\n        {\r\n          type: \"time\",\r\n          time: {\r\n            format: \"MM/DD/YY\",\r\n            tooltipFormat: \"ll\",\r\n          },\r\n        },\r\n      ],\r\n      yAxes: [\r\n        {\r\n          gridLines: {\r\n            display: false,\r\n          },\r\n          ticks: {\r\n            // Include a dollar sign in the ticks\r\n            callback: function (value, index, values) {\r\n              return numeral(value).format(\"0a\");\r\n            },\r\n          },\r\n        },\r\n      ],\r\n    },\r\n  };\r\n\r\n  const buildChartData = (data, casesType=\"cases\") => {\r\n    let chartData = []\r\n    let lastDataPoint;\r\n\r\n    for(let date in data.cases){\r\n        if(lastDataPoint){\r\n            let newDataPoint = {\r\n                x:date,\r\n                y:data[casesType][date] - lastDataPoint\r\n            }\r\n            chartData.push(newDataPoint)\r\n        }\r\n        lastDataPoint = data[casesType][date]\r\n    }\r\n    return chartData;\r\n}\r\n\r\n\r\n\r\nfunction LineGraph({casesType=\"cases\"}) {\r\n\r\nconst [data, setData] = useState({});\r\n\r\n    useEffect(() => {\r\n        \r\nconst fetchData = async () => {\r\n        await fetch('https://disease.sh/v3/covid-19/historical/all?lastdays=30')\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n            let chartData = buildChartData(data, casesType);\r\n            setData(chartData)\r\n            console.log(data)\r\n        })\r\n        }\r\n        fetchData();\r\n}, [casesType])\r\n   \r\n\r\n    return (\r\n        <div>\r\n            {data?.length > 0 && (\r\n             <Line\r\n            options={options}\r\n            data ={{\r\n                datasets: [{\r\n                    data:data,\r\n                    backgroundColor: 'rgba(204, 1, 0)',\r\n                    borderColor: '#CC1034'\r\n                }]\r\n                \r\n            }}\r\n           \r\n            ></Line>)}\r\n\r\n           \r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LineGraph\r\n","\nimport React ,{useState, useEffect} from 'react'\nimport { FormControl, Select, MenuItem, Card, CardContent } from '@mui/material'\nimport InfoCard from './InfoCard'\nimport Map from './Map'\nimport Table from \"./Table\"\nimport LineGraph from './LineGraph'\nimport {sortData, prettyPrintStat} from './utils.js'\nimport './App.css';\nimport \"leaflet/dist/leaflet.css\"\nfunction App() {\n\n  // https://disease.sh/v3/covid-19/countries\n\n  const [countries, setCountries] = useState([]);\n  const [country, setCountry] = useState('worldwide');\n  const [countryInfo, setCountryInfo] = useState({});\n  const [tableData, setTableData] = useState([]);\n  const [mapCenter, setMapCenter] = useState({lat:34.80746, lng:-40.4796})\n  const[mapZoom, setMapZoom] = useState(3)\n  const[mapCountries, setMapCountries] = useState([])\n\n  const [casesType, setCasesType] = useState(\"cases\");\n\n\n  useEffect(() => {\n    const getCountryInfo = async () =>{\n      await fetch('https://disease.sh/v3/covid-19/all')\n      .then((response) => response.json())\n      .then((data) => {\n          setCountryInfo(data)\n      });\n    }\n    getCountryInfo();\n  }, []);\n\n\n  useEffect(() => {\n\n    const getCountryData = async () =>{\n      await fetch('https://disease.sh/v3/covid-19/countries')\n      .then((response) => response.json())\n      .then((data) => {\n        const countries = data.map(country => (\n          {\n            name: country.country,\n            value: country.countryInfo.iso2\n          }\n          ))\n          const sortedData = sortData(data)\n          setTableData(sortedData)\n          setMapCountries(data)\n          setCountries(countries)\n      });\n    }\n    getCountryData();\n\n  }, []);\n\n   const handleCountryChange = async (e) =>{\n     const country = e.target.value;\n     const url = country === 'worldwide' ? \"https://disease.sh/v3/covid-19/all\" : `https://disease.sh/v3/covid-19/countries/${country}`;\n\n   await fetch(url)\n   .then(response => response.json())\n   .then(data => {\n    setCountryInfo(data);\n    setCountry(country)\n\n    setMapCenter([data.countryInfo.lat, data.countryInfo.long])\n    setMapZoom(5)\n\n   })\n  }\n \n  return (\n    <div className=\"App\">\n\n      <div className=\"app__left\">\n      <div className=\"app__header\">\n            <h1>Covid-19 Tracker</h1>\n            <FormControl className='app__dropdown'>\n            <Select variant='outlined' value={country} onChange={handleCountryChange} >\n            <MenuItem value=\"worldwide\">WorldWide</MenuItem>\n              {countries.map(country => (<MenuItem value={country.value}>{country.name}</MenuItem>))}\n              </Select>\n            </FormControl>\n            </div>\n\n            <div className=\"app__stats\">\n            <InfoCard title=\"CoronaVirus Cases\" cases={prettyPrintStat(countryInfo.todayCases)} total={countryInfo.cases}/>\n            <InfoCard title=\"Recovered\" cases={prettyPrintStat(countryInfo.todayRecovered)} total={countryInfo.recovered}/>\n            <InfoCard title=\"Deaths\" cases={prettyPrintStat(countryInfo.todayDeaths)} total={countryInfo.deaths}/>\n            </div>\n\n            <Map countries={mapCountries} center={mapCenter} zoom={mapZoom}/>\n      </div>\n\n        <Card className=\"app__right\">\n         <CardContent>\n           <h3>Live cases by country</h3>\n            <Table countries={tableData} />\n           <h3>Worldwide new cases</h3>\n           <LineGraph />\n           </CardContent>\n        </Card>\n     \n    \n     \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}